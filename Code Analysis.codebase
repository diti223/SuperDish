{"codebase":{"name":"SuperDish","subfolders":[{"files":[{"symbols":[{"name":"DummyAppFlowFactory","range":{"start":{"line":10,"character":0},"end":{"line":20,"character":1}},"kind":10,"selectionRange":{"end":{"line":10,"character":24},"start":{"line":10,"character":5}},"children":[{"name":"makeAppFlow()","kind":6,"selectionRange":{"start":{"line":12,"character":16},"end":{"character":29,"line":12}},"range":{"start":{"character":4,"line":12},"end":{"line":19,"character":5}}}]}],"name":"DummyAppFlowFactory.swift","code":"//\n//  DummyAppFlowFactory.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 07.02.2024.\n//\n\nimport Foundation\nimport MainDish\n\nenum DummyAppFlowFactory {\n    @MainActor\n    static func makeAppFlow() -> AppFlow {\n        AppFlow(\n            loginUseCase: UseCase { request in\n                debugPrint(\"Received login request \\(request)\")\n            }, registerUseCase: UseCase { request in\n                debugPrint(\"Received register request \\(request)\")\n            })\n    }\n}\n\n"},{"symbols":[{"children":[{"kind":7,"name":"appFlow","range":{"start":{"line":14,"character":17},"end":{"line":14,"character":67}},"selectionRange":{"start":{"line":14,"character":21},"end":{"character":28,"line":14}}},{"selectionRange":{"end":{"character":28,"line":16},"start":{"character":21,"line":16}},"range":{"start":{"character":17,"line":16},"end":{"line":16,"character":67}},"kind":7,"name":"appFlow"},{"range":{"end":{"character":45,"line":18},"start":{"line":18,"character":31}},"selectionRange":{"end":{"line":18,"character":45},"start":{"character":35,"line":18}},"kind":7,"name":"scenePhase"},{"selectionRange":{"start":{"line":20,"character":8},"end":{"line":20,"character":12}},"range":{"end":{"character":5,"line":36},"start":{"line":20,"character":4}},"kind":7,"name":"body"},{"range":{"start":{"line":22,"character":19},"end":{"line":22,"character":28}},"kind":13,"selectionRange":{"start":{"line":22,"character":19},"end":{"line":22,"character":28}},"name":"viewModel"}],"kind":23,"selectionRange":{"end":{"character":19,"line":11},"start":{"character":7,"line":11}},"name":"SuperDishApp","range":{"end":{"character":1,"line":37},"start":{"character":0,"line":11}}}],"code":"//\n//  SuperDishApp.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 17.08.2023.\n//\n\nimport SwiftUI\nimport MainDish\n\n@main\nstruct SuperDishApp: App {\n\n    #if DEBUG\n    @StateObject var appFlow = InMemoryAppFlowFactory.makeAppFlow()\n    #else\n    @StateObject var appFlow = InMemoryAppFlowFactory.makeAppFlow()\n    #endif\n    @Environment(\\.scenePhase) var scenePhase\n    \n    var body: some Scene {\n        WindowGroup {\n            if let viewModel = appFlow.loginViewModel {\n                LoginView(viewModel: viewModel)\n            } else {\n                Color.clear\n                    .onAppear(perform: {\n                        appFlow.start()\n                    })\n            }\n        }\n        .onChange(of: scenePhase) { (oldPhase, newPhase) in\n            if case .active = newPhase {\n                appFlow.start()\n            }\n        }\n    }\n}\n\n\n\n","name":"SuperDishApp.swift"},{"name":"InMemoryAppFlowFactory.swift","code":"//\n//  InMemoryAppFlowFactory.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 07.02.2024.\n//\n\nimport Foundation\nimport MainDish\n\nenum InMemoryAppFlowFactory {\n    static let inMemoryService = InMemoryAuthenticationService()\n    @MainActor\n    static func makeAppFlow() -> AppFlow {\n        AppFlow(\n            loginUseCase: inMemoryService,\n            registerUseCase: inMemoryService\n        )\n    }\n}\n","symbols":[{"range":{"start":{"character":0,"line":10},"end":{"character":1,"line":19}},"children":[{"name":"inMemoryService","kind":7,"selectionRange":{"end":{"line":11,"character":30},"start":{"character":15,"line":11}},"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":64}}},{"kind":6,"range":{"end":{"line":18,"character":5},"start":{"character":4,"line":13}},"selectionRange":{"end":{"line":13,"character":29},"start":{"line":13,"character":16}},"name":"makeAppFlow()"}],"name":"InMemoryAppFlowFactory","kind":10,"selectionRange":{"end":{"line":10,"character":27},"start":{"character":5,"line":10}}}]}],"subfolders":[{"name":"UI","files":[{"symbols":[{"children":[{"name":"viewModel","kind":7,"selectionRange":{"end":{"character":33,"line":11},"start":{"line":11,"character":24}},"range":{"start":{"line":11,"character":20},"end":{"character":49,"line":11}}},{"range":{"end":{"character":5,"line":47},"start":{"line":13,"character":4}},"selectionRange":{"end":{"line":13,"character":12},"start":{"character":8,"line":13}},"kind":7,"name":"body"},{"kind":13,"name":"errorMessage","range":{"start":{"line":23,"character":19},"end":{"character":31,"line":23}},"selectionRange":{"start":{"character":19,"line":23},"end":{"line":23,"character":31}}}],"name":"LoginView","kind":23,"range":{"start":{"line":10,"character":0},"end":{"line":48,"character":1}},"selectionRange":{"end":{"character":16,"line":10},"start":{"line":10,"character":7}}}],"name":"LoginView.swift","code":"//\n//  LoginView.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport SwiftUI\nimport MainDish\n\nstruct LoginView: View {\n    @ObservedObject var viewModel: LoginViewModel\n    \n    var body: some View {\n        VStack {\n            TextField(\"Email\", text: $viewModel.email)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n                .padding()\n            \n            SecureField(\"Password\", text: $viewModel.password)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n                .padding()\n            \n            if let errorMessage = viewModel.errorMessage {\n                Text(errorMessage)\n                    .foregroundColor(.red)\n                    .padding()\n            }\n            \n            Button(\"Login\") {\n                Task {\n                    await viewModel.loginSelected()\n                }\n            }\n            .padding()\n            \n            Button(\"Register\") {\n                Task {\n                    await viewModel.register()\n                }\n            }\n            .padding()\n        }\n        .padding()\n//        .alert(isPresented: $viewModel.hasFinishedLogin, content: {\n//            Alert(title: Text(\"User has been authenticated\"))\n//        })\n    }\n}\n\n//#Preview {\n//    LoginView(viewModel: LoginViewModel(\n//        loginUseCase: UseCaseSender.makeEmpty(),\n//        registerUseCase: UseCaseSender.makeEmpty())\n//    )\n//}\n//\n"}]}],"name":"SuperDish"},{"files":[{"name":"Package.swift","symbols":[{"kind":13,"selectionRange":{"end":{"character":11,"line":5},"start":{"character":4,"line":5}},"name":"package","range":{"end":{"line":23,"character":1},"start":{"character":0,"line":5}}}],"code":"// swift-tools-version: 5.9\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"MainDish\",\n    platforms: [.iOS(.v17), .macOS(.v13)],\n    products: [\n        // Products define the executables and libraries a package produces, making them visible to other packages.\n        .library(\n            name: \"MainDish\",\n            targets: [\"MainDish\"]),\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package, defining a module or a test suite.\n        // Targets can depend on other targets in this package and products from dependencies.\n        .target(\n            name: \"MainDish\"),\n        .testTarget(\n            name: \"MainDishTests\",\n            dependencies: [\"MainDish\"]),\n    ]\n)\n"}],"name":"MainDish","subfolders":[{"name":"Tests","subfolders":[{"name":"MainDishTests","files":[{"code":"//\n//  File.swift\n//  \n//\n//  Created by Adrian Bilescu on 07.02.2024.\n//\n\nimport Foundation\nimport XCTest\n\nextension XCTestCase {\n    func XCTAssertThrowsAsyncError<T: Error>(\n        _ expression: @autoclosure @escaping () async throws -> Void,\n        _ expectedErrorType: T.Type,\n        _ message: String = \"\",\n        file: StaticString = #file,\n        line: UInt = #line\n    ) async {\n        do {\n            try await expression()\n            XCTFail(\"Expected to throw an error of type \\(expectedErrorType), but got success. \\(message)\", file: file, line: line)\n        } catch {\n            XCTAssert(error is T, \"Expected to throw an error of type \\(expectedErrorType), but got \\(error). \\(message)\", file: file, line: line)\n        }\n    }\n}\n","symbols":[{"children":[{"name":"XCTAssertThrowsAsyncError(_:_:_:file:line:)","children":[{"range":{"start":{"character":35,"line":11},"end":{"character":43,"line":11}},"name":"T","kind":26,"selectionRange":{"end":{"line":11,"character":36},"start":{"line":11,"character":35}}}],"range":{"start":{"line":11,"character":4},"end":{"character":5,"line":24}},"kind":6,"selectionRange":{"end":{"line":17,"character":5},"start":{"line":11,"character":9}}}],"range":{"end":{"line":25,"character":1},"start":{"line":10,"character":0}},"selectionRange":{"start":{"character":10,"line":10},"end":{"character":20,"line":10}},"name":"XCTestCase","kind":3}],"name":"XCTAssertThrowsAsyncError.swift"},{"name":"AppFlowTests.swift","symbols":[{"kind":5,"name":"AppFlowTests","children":[{"kind":6,"selectionRange":{"start":{"line":12,"character":9},"end":{"line":12,"character":19}},"name":"testInit()","children":[{"name":"sut","selectionRange":{"start":{"character":12,"line":13},"end":{"line":13,"character":15}},"kind":13,"range":{"end":{"line":13,"character":27},"start":{"line":13,"character":8}}}],"range":{"end":{"character":5,"line":15},"start":{"character":4,"line":12}}},{"selectionRange":{"end":{"character":22,"line":17},"start":{"character":9,"line":17}},"range":{"start":{"character":4,"line":17},"end":{"character":5,"line":23}},"kind":6,"name":"testOnStart()","children":[{"kind":13,"name":"sut","range":{"start":{"character":8,"line":18},"end":{"character":27,"line":18}},"selectionRange":{"end":{"line":18,"character":15},"start":{"character":12,"line":18}}}]},{"range":{"end":{"character":5,"line":27},"start":{"line":25,"character":12}},"name":"makeSUT()","kind":6,"selectionRange":{"start":{"line":25,"character":17},"end":{"line":25,"character":26}}}],"selectionRange":{"start":{"character":6,"line":11},"end":{"line":11,"character":18}},"range":{"start":{"line":11,"character":0},"end":{"line":28,"character":1}}}],"code":"//\n//  File.swift\n//  \n//\n//  Created by Adrian Bilescu on 24.12.2023.\n//\n\nimport Foundation\nimport XCTest\nimport MainDish\n\nclass AppFlowTests: XCTestCase {\n    func testInit() {\n        let sut = makeSUT()\n        XCTAssertNil(sut.loginViewModel)\n    }\n    \n    func testOnStart() {\n        let sut = makeSUT()\n        \n        sut.start()\n        \n        XCTAssertNotNil(sut.loginViewModel)\n    }\n    \n    private func makeSUT() -> AppFlow {\n        AppFlow(loginUseCase: UseCaseSender.makeEmpty(), registerUseCase: UseCaseSender.makeEmpty())\n    }\n}\n"},{"name":"InMemoryAuthenticationServiceTests.swift","code":"//\n//  File.swift\n//  \n//\n//  Created by Adrian Bilescu on 07.02.2024.\n//\n\nimport Foundation\nimport XCTest\nimport MainDish\n\nclass InMemoryAuthenticationServiceTests: XCTestCase {\n    func testOnInit_ListIsEmpty() {\n        let sut = makeSUT()\n        XCTAssertEqual(sut.users, [])\n    }\n    \n    func testOnRegister_AddUserToList() async throws {\n        // given\n        let sut = makeSUT()\n        \n        let email = \"john@doe.com\"\n        let customer = makeCustomer(email: email)\n        \n        // when\n        try await sut.register(\n            customer: customer,\n            password: \"any password\"\n        )\n        \n        // then\n        XCTAssertEqual(sut.users[0].email, \"john@doe.com\")\n    }\n    \n    func testOnLogin_MissingUser_ThrowsLoginFailedException() async throws {\n        let sut = makeSUT()\n        \n        await XCTAssertThrowsAsyncError(\n            try await sut.login(email: \"any email\", password: \"whatever\"),\n            LoginFailedException.self\n        )\n    }\n    \n    func testOnLogin_ExistingUsers_InvalidPassword_ThrowLoginFailedException() async throws {\n        // given\n        let sut = makeSUT()\n        \n        let email = \"john@doe.com\"\n        let password = \"someStrongPasswordHere\"\n        let customer = makeCustomer(email: email)\n        try await sut.register(customer: customer, password: password)\n        \n        // when\n        await XCTAssertThrowsAsyncError(\n            try await sut.login(email: email, password: \"invalid passowrd\"),\n            LoginFailedException.self,\n            \"Expected no error for valid login credentials\"\n        )\n    }\n    \n    func testOnLogin_ExistingUsers_ValidCredentials_ThrowsNoError() async throws {\n        // given\n        let sut = makeSUT()\n        \n        let email = \"john@doe.com\"\n        let password = \"someStrongPasswordHere\"\n        let customer = makeCustomer(email: email)\n        try await sut.register(customer: customer, password: password)\n        \n        // when\n        await XCTAssertNoThrowAsync(\n            try await sut.login(email: email, password: password),\n            \"Expected no error for valid login credentials\"\n        )\n    }\n    \n    private func makeCustomer(email: String) -> Customer {\n        Customer(\n            id: UUID(),\n            name: \"any name\",\n            email: email,\n            deliveryAddress: \"any address\"\n        )\n    }\n    \n    //TODO:\n    // invalid email, invalid password\n    // valid email, invalid password\n    // invalid email, valid password\n    // valid email, valid password\n    // register user with existing email should throw exception\n    \n    //MARK: -\n    private func makeSUT() -> InMemoryAuthenticationService {\n        InMemoryAuthenticationService()\n    }\n}\n","symbols":[{"range":{"start":{"line":11,"character":0},"end":{"line":96,"character":1}},"selectionRange":{"end":{"line":11,"character":40},"start":{"line":11,"character":6}},"kind":5,"name":"InMemoryAuthenticationServiceTests","children":[{"kind":6,"selectionRange":{"start":{"character":9,"line":12},"end":{"character":33,"line":12}},"children":[{"name":"sut","selectionRange":{"end":{"line":13,"character":15},"start":{"line":13,"character":12}},"kind":13,"range":{"end":{"character":27,"line":13},"start":{"character":8,"line":13}}}],"range":{"start":{"line":12,"character":4},"end":{"line":15,"character":5}},"name":"testOnInit_ListIsEmpty()"},{"kind":6,"range":{"end":{"line":32,"character":5},"start":{"character":4,"line":17}},"name":"testOnRegister_AddUserToList()","children":[{"name":"sut","kind":13,"selectionRange":{"end":{"line":19,"character":15},"start":{"line":19,"character":12}},"range":{"start":{"line":19,"character":8},"end":{"line":19,"character":27}}},{"range":{"end":{"character":34,"line":21},"start":{"character":8,"line":21}},"selectionRange":{"start":{"line":21,"character":12},"end":{"line":21,"character":17}},"name":"email","kind":13},{"name":"customer","selectionRange":{"start":{"line":22,"character":12},"end":{"line":22,"character":20}},"range":{"start":{"character":8,"line":22},"end":{"character":49,"line":22}},"kind":13}],"selectionRange":{"end":{"character":39,"line":17},"start":{"line":17,"character":9}}},{"children":[{"selectionRange":{"end":{"character":15,"line":35},"start":{"line":35,"character":12}},"kind":13,"range":{"end":{"line":35,"character":27},"start":{"line":35,"character":8}},"name":"sut"}],"range":{"start":{"character":4,"line":34},"end":{"line":41,"character":5}},"selectionRange":{"end":{"line":34,"character":61},"start":{"line":34,"character":9}},"kind":6,"name":"testOnLogin_MissingUser_ThrowsLoginFailedException()"},{"name":"testOnLogin_ExistingUsers_InvalidPassword_ThrowLoginFailedException()","kind":6,"children":[{"kind":13,"range":{"end":{"character":27,"line":45},"start":{"character":8,"line":45}},"selectionRange":{"start":{"line":45,"character":12},"end":{"line":45,"character":15}},"name":"sut"},{"kind":13,"selectionRange":{"end":{"line":47,"character":17},"start":{"line":47,"character":12}},"range":{"start":{"character":8,"line":47},"end":{"line":47,"character":34}},"name":"email"},{"range":{"end":{"line":48,"character":47},"start":{"line":48,"character":8}},"name":"password","selectionRange":{"end":{"line":48,"character":20},"start":{"line":48,"character":12}},"kind":13},{"selectionRange":{"end":{"character":20,"line":49},"start":{"line":49,"character":12}},"kind":13,"name":"customer","range":{"end":{"character":49,"line":49},"start":{"character":8,"line":49}}}],"range":{"end":{"line":58,"character":5},"start":{"character":4,"line":43}},"selectionRange":{"start":{"character":9,"line":43},"end":{"character":78,"line":43}}},{"selectionRange":{"end":{"character":67,"line":60},"start":{"character":9,"line":60}},"range":{"start":{"line":60,"character":4},"end":{"line":74,"character":5}},"children":[{"kind":13,"range":{"start":{"character":8,"line":62},"end":{"character":27,"line":62}},"name":"sut","selectionRange":{"end":{"line":62,"character":15},"start":{"line":62,"character":12}}},{"name":"email","selectionRange":{"end":{"line":64,"character":17},"start":{"line":64,"character":12}},"range":{"start":{"line":64,"character":8},"end":{"line":64,"character":34}},"kind":13},{"selectionRange":{"start":{"line":65,"character":12},"end":{"character":20,"line":65}},"kind":13,"range":{"start":{"character":8,"line":65},"end":{"line":65,"character":47}},"name":"password"},{"selectionRange":{"start":{"line":66,"character":12},"end":{"character":20,"line":66}},"range":{"end":{"character":49,"line":66},"start":{"character":8,"line":66}},"kind":13,"name":"customer"}],"kind":6,"name":"testOnLogin_ExistingUsers_ValidCredentials_ThrowsNoError()"},{"range":{"start":{"character":12,"line":76},"end":{"line":83,"character":5}},"kind":6,"selectionRange":{"start":{"character":17,"line":76},"end":{"character":44,"line":76}},"name":"makeCustomer(email:)"},{"range":{"end":{"line":95,"character":5},"start":{"line":93,"character":12}},"kind":6,"selectionRange":{"end":{"line":93,"character":26},"start":{"line":93,"character":17}},"name":"makeSUT()"}]}]},{"code":"//\n//  File.swift\n//  \n//\n//  Created by Adrian Bilescu on 07.02.2024.\n//\n\nimport Foundation\nimport XCTest\n\nextension XCTestCase {\n    func XCTAssertNoThrowAsync(\n        _ expression: @autoclosure @escaping () async throws -> Void,\n        _ message: String = \"\",\n        file: StaticString = #file,\n        line: UInt = #line\n    ) async {\n        do {\n            try await expression()\n        } catch {\n            XCTFail(\"Didn't expect to throw an error. Got `\\(error)`. \\(message)\", file: file, line: line)\n        }\n    }\n}\n","symbols":[{"children":[{"kind":6,"range":{"start":{"character":4,"line":11},"end":{"line":22,"character":5}},"selectionRange":{"end":{"line":16,"character":5},"start":{"line":11,"character":9}},"name":"XCTAssertNoThrowAsync(_:_:file:line:)"}],"range":{"start":{"line":10,"character":0},"end":{"line":23,"character":1}},"selectionRange":{"end":{"line":10,"character":20},"start":{"line":10,"character":10}},"kind":3,"name":"XCTestCase"}],"name":"XCTAssertNoThrowAsync.swift"},{"symbols":[{"name":"LoginViewModelTests","children":[{"selectionRange":{"start":{"line":13,"character":9},"end":{"line":13,"character":27}},"kind":6,"range":{"start":{"line":13,"character":4},"end":{"character":5,"line":18}},"name":"testInitialState()","children":[{"kind":13,"selectionRange":{"end":{"line":14,"character":15},"start":{"line":14,"character":12}},"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":27}},"name":"sut"}]},{"selectionRange":{"start":{"character":9,"line":21},"end":{"line":21,"character":76}},"name":"testLoginSelected_ThrowingInvalidCredentials_DisplaysErrorMessage()","range":{"end":{"character":5,"line":30},"start":{"character":4,"line":21}},"kind":6,"children":[{"name":"sut","kind":13,"range":{"start":{"line":23,"character":8},"end":{"character":10,"line":25}},"selectionRange":{"start":{"line":23,"character":12},"end":{"line":23,"character":15}}}]},{"name":"testLoginSelected_EmptyFields_DisplaysEmptyFieldErrorMessage()","kind":6,"selectionRange":{"start":{"line":32,"character":9},"end":{"line":32,"character":71}},"children":[{"range":{"start":{"line":33,"character":8},"end":{"line":33,"character":27}},"name":"sut","kind":13,"selectionRange":{"start":{"line":33,"character":12},"end":{"line":33,"character":15}}}],"range":{"end":{"character":5,"line":38},"start":{"line":32,"character":4}}},{"children":[{"kind":13,"selectionRange":{"end":{"line":41,"character":29},"start":{"character":12,"line":41}},"name":"invokedLoginCount","range":{"start":{"line":41,"character":8},"end":{"line":41,"character":33}}},{"range":{"end":{"character":10,"line":44},"start":{"line":42,"character":8}},"kind":13,"selectionRange":{"end":{"line":42,"character":15},"start":{"line":42,"character":12}},"name":"sut"}],"name":"testLoginSelected_ValidFields_InvokesLoginUseCase()","range":{"end":{"line":49,"character":5},"start":{"character":4,"line":40}},"selectionRange":{"start":{"character":9,"line":40},"end":{"character":60,"line":40}},"kind":6},{"children":[{"name":"sut","selectionRange":{"start":{"line":52,"character":12},"end":{"character":15,"line":52}},"range":{"start":{"line":52,"character":8},"end":{"character":32,"line":52}},"kind":13}],"name":"testLoginSelected_SuccessResponse_PublishesFinishEvent()","selectionRange":{"end":{"line":51,"character":65},"start":{"character":9,"line":51}},"kind":6,"range":{"end":{"line":57,"character":5},"start":{"character":4,"line":51}}},{"children":[{"selectionRange":{"start":{"line":62,"character":12},"end":{"character":15,"line":62}},"kind":13,"name":"sut","range":{"end":{"line":64,"character":10},"start":{"line":62,"character":8}}}],"kind":6,"name":"testRegisterSelected_ThrowingInvalidCredentials_DisplaysErrorMessage()","selectionRange":{"start":{"character":9,"line":60},"end":{"line":60,"character":79}},"range":{"end":{"line":69,"character":5},"start":{"line":60,"character":4}}},{"selectionRange":{"end":{"character":74,"line":71},"start":{"character":9,"line":71}},"children":[{"kind":13,"range":{"start":{"character":8,"line":72},"end":{"line":72,"character":27}},"name":"sut","selectionRange":{"start":{"line":72,"character":12},"end":{"line":72,"character":15}}}],"range":{"start":{"line":71,"character":4},"end":{"line":77,"character":5}},"name":"testRegisterSelected_EmptyFields_DisplaysEmptyFieldErrorMessage()","kind":6},{"name":"testRegisterSelected_ValidFields_InvokesLoginUseCase()","children":[{"selectionRange":{"start":{"character":12,"line":80},"end":{"character":32,"line":80}},"kind":13,"name":"invokedRegisterCount","range":{"end":{"character":36,"line":80},"start":{"line":80,"character":8}}},{"range":{"end":{"character":10,"line":83},"start":{"line":81,"character":8}},"name":"sut","kind":13,"selectionRange":{"end":{"line":81,"character":15},"start":{"character":12,"line":81}}}],"kind":6,"range":{"start":{"character":4,"line":79},"end":{"character":5,"line":88}},"selectionRange":{"start":{"character":9,"line":79},"end":{"line":79,"character":63}}},{"range":{"end":{"character":5,"line":96},"start":{"line":90,"character":4}},"name":"testRegisterSelected_SuccessResponse_PublishesFinishEvent()","kind":6,"children":[{"range":{"start":{"line":91,"character":8},"end":{"character":32,"line":91}},"kind":13,"name":"sut","selectionRange":{"end":{"line":91,"character":15},"start":{"line":91,"character":12}}}],"selectionRange":{"end":{"character":68,"line":90},"start":{"line":90,"character":9}}},{"children":[{"kind":13,"selectionRange":{"start":{"line":101,"character":12},"end":{"line":101,"character":15}},"range":{"end":{"character":9,"line":104},"start":{"character":8,"line":101}},"name":"sut"}],"range":{"start":{"line":100,"character":12},"end":{"line":107,"character":5}},"kind":6,"name":"makeSUT(loginUseCase:registerUseCase:)","selectionRange":{"start":{"line":100,"character":17},"end":{"line":100,"character":144}}},{"kind":6,"children":[{"selectionRange":{"end":{"character":15,"line":110},"start":{"line":110,"character":12}},"name":"sut","kind":13,"range":{"end":{"character":87,"line":110},"start":{"character":8,"line":110}}}],"range":{"end":{"line":114,"character":5},"start":{"line":109,"character":12}},"name":"makeValidSUT(loginUseCase:registerUseCase:)","selectionRange":{"start":{"character":17,"line":109},"end":{"character":149,"line":109}}},{"name":"fillInValidCredentials(_:)","selectionRange":{"start":{"character":17,"line":117},"end":{"character":62,"line":117}},"kind":6,"range":{"end":{"line":120,"character":5},"start":{"line":117,"character":12}}}],"selectionRange":{"start":{"line":10,"character":12},"end":{"character":31,"line":10}},"range":{"start":{"line":10,"character":6},"end":{"line":122,"character":1}},"kind":5}],"name":"LoginViewModelTests.swift","code":"//\n//  SuperDishTests.swift\n//  SuperDishTests\n//\n//  Created by Adrian Bilescu on 18.08.2023.\n//\n\nimport XCTest\nimport MainDish\n\nfinal class LoginViewModelTests: XCTestCase {\n    \n    // MARK: - Test Initial State\n    func testInitialState() {\n        let sut = makeSUT()\n        XCTAssertNil(sut.errorMessage)\n        XCTAssertEqual(sut.email, \"\")\n        XCTAssertEqual(sut.password, \"\")\n    }\n    \n    // MARK: - Test Login Use Case\n    func testLoginSelected_ThrowingInvalidCredentials_DisplaysErrorMessage() async throws {\n        \n        let sut = makeValidSUT(loginUseCase: UseCaseSender { _ in\n            throw LoginFailedException()\n        })\n        \n        await sut.loginSelected()\n        \n        XCTAssertEqual(sut.errorMessage, \"Invalid credentials\")\n    }\n    \n    func testLoginSelected_EmptyFields_DisplaysEmptyFieldErrorMessage() async {\n        let sut = makeSUT()\n        \n        await sut.loginSelected()\n        \n        XCTAssertEqual(sut.errorMessage, \"Fields are empty\")\n    }\n    \n    func testLoginSelected_ValidFields_InvokesLoginUseCase() async {\n        var invokedLoginCount = 0\n        let sut = makeValidSUT(loginUseCase: UseCaseSender { _ in\n            invokedLoginCount += 1\n        })\n        \n        await sut.loginSelected()\n        \n        XCTAssertEqual(invokedLoginCount, 1)\n    }\n    \n    func testLoginSelected_SuccessResponse_PublishesFinishEvent() async {\n        let sut = makeValidSUT()\n        \n        await sut.loginSelected()\n        \n        XCTAssertEqual(sut.hasFinishedLogin, true, \"Expected to finish login\")\n    }\n    \n    // MARK: - Test Register Use Case\n    func testRegisterSelected_ThrowingInvalidCredentials_DisplaysErrorMessage() async throws {\n        \n        let sut = makeValidSUT(registerUseCase: UseCaseSender { _ in\n            throw LoginFailedException()\n        })\n        \n        await sut.register()\n        \n        XCTAssertEqual(sut.errorMessage, \"Invalid credentials\")\n    }\n    \n    func testRegisterSelected_EmptyFields_DisplaysEmptyFieldErrorMessage() async {\n        let sut = makeSUT()\n        \n        await sut.register()\n        \n        XCTAssertEqual(sut.errorMessage, \"Fields are empty\")\n    }\n    \n    func testRegisterSelected_ValidFields_InvokesLoginUseCase() async {\n        var invokedRegisterCount = 0\n        let sut = makeValidSUT(registerUseCase: UseCaseSender { _ in\n            invokedRegisterCount += 1\n        })\n        \n        await sut.register()\n        \n        XCTAssertEqual(invokedRegisterCount, 1)\n    }\n    \n    func testRegisterSelected_SuccessResponse_PublishesFinishEvent() async {\n        let sut = makeValidSUT()\n        \n        await sut.register()\n        \n        XCTAssertEqual(sut.hasFinishedRegister, true, \"Expected to finish login\")\n    }\n    \n    // MARK: - Helpers\n    \n    private func makeSUT(loginUseCase: LoginUseCase = UseCaseSender { _ in }, registerUseCase: RegisterCustomerUseCase = UseCaseSender { _ in }) -> LoginViewModel {\n        let sut = LoginViewModel(\n            loginUseCase: loginUseCase,\n            registerUseCase: registerUseCase\n        )\n        \n        return sut\n    }\n    \n    private func makeValidSUT(loginUseCase: LoginUseCase = UseCaseSender { _ in }, registerUseCase: RegisterCustomerUseCase = UseCaseSender { _ in }) -> LoginViewModel {\n        let sut = makeSUT(loginUseCase: loginUseCase, registerUseCase: registerUseCase)\n        fillInValidCredentials(sut)\n        \n        return sut\n    }\n    \n    \n    private func fillInValidCredentials(_ sut: LoginViewModel) {\n        sut.email = \"someEmail\"\n        sut.password = \"somePass\"\n    }\n    \n}\n\n\n"}]}]},{"subfolders":[{"name":"MainDish","subfolders":[{"name":"Intfrastructure","files":[{"code":"//\n//  InMemoryAuthService.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\n\npublic class InMemoryAuthenticationService: LoginUseCase, RegisterCustomerUseCase {\n    public struct RegisteredUser: Equatable {\n        public let email: String\n        fileprivate let password: String\n    }\n    \n    public var users: [RegisteredUser] = []\n    public init() {}\n    \n    public func register(customer: Customer, password: String) async throws {\n        users.append(RegisteredUser(email: customer.email, password: password))\n    }\n    \n    public func login(email: String, password: String) async throws {\n        \n        let containsUserCredentials: (RegisteredUser) -> Bool = { user in\n            user.email == email && user.password == password\n        }\n        \n        if users.contains(where: containsUserCredentials) {\n            return\n        }\n        \n        throw LoginFailedException()\n    }\n}\n","symbols":[{"range":{"start":{"character":7,"line":10},"end":{"line":35,"character":1}},"name":"InMemoryAuthenticationService","kind":5,"children":[{"selectionRange":{"start":{"character":18,"line":11},"end":{"line":11,"character":32}},"range":{"end":{"character":5,"line":14},"start":{"line":11,"character":11}},"children":[{"kind":7,"range":{"start":{"line":12,"character":15},"end":{"line":12,"character":32}},"name":"email","selectionRange":{"start":{"character":19,"line":12},"end":{"character":24,"line":12}}},{"kind":7,"selectionRange":{"end":{"line":13,"character":32},"start":{"character":24,"line":13}},"range":{"end":{"line":13,"character":40},"start":{"line":13,"character":20}},"name":"password"}],"name":"RegisteredUser","kind":23},{"selectionRange":{"end":{"character":20,"line":16},"start":{"line":16,"character":15}},"name":"users","kind":7,"range":{"start":{"character":11,"line":16},"end":{"character":43,"line":16}}},{"range":{"start":{"line":17,"character":11},"end":{"line":17,"character":20}},"kind":6,"selectionRange":{"start":{"character":11,"line":17},"end":{"line":17,"character":17}},"name":"init()"},{"name":"register(customer:password:)","range":{"start":{"character":11,"line":19},"end":{"line":21,"character":5}},"selectionRange":{"start":{"character":16,"line":19},"end":{"character":62,"line":19}},"kind":6},{"kind":6,"children":[{"name":"containsUserCredentials","range":{"end":{"line":27,"character":9},"start":{"line":25,"character":8}},"kind":13,"selectionRange":{"start":{"character":12,"line":25},"end":{"line":25,"character":35}}}],"name":"login(email:password:)","range":{"end":{"character":5,"line":34},"start":{"character":11,"line":23}},"selectionRange":{"start":{"line":23,"character":16},"end":{"line":23,"character":54}}}],"selectionRange":{"start":{"line":10,"character":13},"end":{"line":10,"character":42}}}],"name":"InMemoryAuthenticationService.swift"}]},{"name":"Domain","subfolders":[{"files":[{"name":"Order.swift","symbols":[{"kind":10,"selectionRange":{"start":{"character":5,"line":9},"end":{"character":16,"line":9}},"range":{"start":{"line":9,"character":0},"end":{"line":16,"character":1}},"name":"OrderStatus","children":[{"name":"pending","selectionRange":{"end":{"character":16,"line":10},"start":{"character":9,"line":10}},"kind":22,"range":{"end":{"line":10,"character":16},"start":{"line":10,"character":9}}},{"kind":22,"name":"confirmed","range":{"end":{"line":11,"character":18},"start":{"character":9,"line":11}},"selectionRange":{"start":{"line":11,"character":9},"end":{"line":11,"character":18}}},{"name":"inPreparation","kind":22,"selectionRange":{"start":{"line":12,"character":9},"end":{"character":22,"line":12}},"range":{"start":{"line":12,"character":9},"end":{"line":12,"character":22}}},{"name":"outForDelivery","kind":22,"range":{"end":{"character":23,"line":13},"start":{"line":13,"character":9}},"selectionRange":{"start":{"line":13,"character":9},"end":{"character":23,"line":13}}},{"selectionRange":{"start":{"character":9,"line":14},"end":{"line":14,"character":18}},"kind":22,"range":{"end":{"character":18,"line":14},"start":{"line":14,"character":9}},"name":"delivered"},{"name":"cancelled","range":{"start":{"line":15,"character":9},"end":{"character":18,"line":15}},"selectionRange":{"start":{"line":15,"character":9},"end":{"line":15,"character":18}},"kind":22}]},{"name":"Order","kind":23,"children":[{"kind":7,"range":{"start":{"character":4,"line":19},"end":{"line":19,"character":16}},"selectionRange":{"end":{"line":19,"character":10},"start":{"line":19,"character":8}},"name":"id"},{"range":{"start":{"character":4,"line":20},"end":{"line":20,"character":24}},"name":"customerId","selectionRange":{"start":{"character":8,"line":20},"end":{"character":18,"line":20}},"kind":7},{"selectionRange":{"end":{"character":13,"line":21},"start":{"line":21,"character":8}},"range":{"end":{"line":21,"character":26},"start":{"line":21,"character":4}},"kind":7,"name":"items"},{"range":{"start":{"line":22,"character":4},"end":{"line":22,"character":38}},"kind":7,"name":"paymentDetails","selectionRange":{"start":{"character":8,"line":22},"end":{"line":22,"character":22}}},{"range":{"end":{"character":40,"line":23},"start":{"character":4,"line":23}},"name":"deliveryDetails","kind":7,"selectionRange":{"start":{"character":8,"line":23},"end":{"line":23,"character":23}}},{"name":"status","kind":7,"range":{"start":{"line":24,"character":4},"end":{"line":24,"character":27}},"selectionRange":{"end":{"character":14,"line":24},"start":{"character":8,"line":24}}}],"range":{"end":{"line":25,"character":1},"start":{"line":18,"character":0}},"selectionRange":{"end":{"line":18,"character":12},"start":{"character":7,"line":18}}}],"code":"//\n//  Order.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\nenum OrderStatus {\n    case pending\n    case confirmed\n    case inPreparation\n    case outForDelivery\n    case delivered\n    case cancelled\n}\n\nstruct Order {\n    let id: UUID\n    let customerId: UUID\n    var items: [OrderItem]\n    var paymentDetails: PaymentDetails\n    var deliveryDetails: DeliveryDetails\n    var status: OrderStatus\n}\n"},{"symbols":[{"name":"Customer","children":[{"range":{"start":{"line":10,"character":11},"end":{"line":10,"character":23}},"selectionRange":{"end":{"line":10,"character":17},"start":{"line":10,"character":15}},"name":"id","kind":7},{"name":"name","range":{"start":{"line":11,"character":11},"end":{"line":11,"character":27}},"selectionRange":{"start":{"line":11,"character":15},"end":{"character":19,"line":11}},"kind":7},{"range":{"end":{"line":12,"character":28},"start":{"character":11,"line":12}},"kind":7,"selectionRange":{"start":{"character":15,"line":12},"end":{"line":12,"character":20}},"name":"email"},{"range":{"start":{"character":11,"line":13},"end":{"line":13,"character":38}},"name":"deliveryAddress","selectionRange":{"start":{"line":13,"character":15},"end":{"line":13,"character":30}},"kind":7},{"name":"init(id:name:email:deliveryAddress:)","kind":6,"selectionRange":{"start":{"character":11,"line":15},"end":{"character":79,"line":15}},"range":{"start":{"character":11,"line":15},"end":{"character":5,"line":20}}}],"selectionRange":{"start":{"line":9,"character":14},"end":{"character":22,"line":9}},"range":{"end":{"line":21,"character":1},"start":{"line":9,"character":7}},"kind":23}],"code":"//\n//  Customer.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\npublic struct Customer {\n    public let id: UUID\n    public var name: String\n    public var email: String\n    public var deliveryAddress: String\n    \n    public init(id: UUID, name: String, email: String, deliveryAddress: String) {\n        self.id = id\n        self.name = name\n        self.email = email\n        self.deliveryAddress = deliveryAddress\n    }\n}\n","name":"Customer.swift"},{"name":"PaymentDetails.swift","code":"//\n//  PaymentDetails.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\nstruct PaymentDetails {\n    var method: PaymentMethod\n    var cardNumber: String\n    var expiryDate: Date\n    var cvv: String\n}\n\nenum PaymentMethod {\n    case creditCard\n    case paypal\n    case applePay\n}\n\n\n","symbols":[{"children":[{"name":"method","kind":7,"range":{"start":{"character":4,"line":10},"end":{"line":10,"character":29}},"selectionRange":{"end":{"line":10,"character":14},"start":{"line":10,"character":8}}},{"name":"cardNumber","kind":7,"selectionRange":{"start":{"character":8,"line":11},"end":{"line":11,"character":18}},"range":{"end":{"line":11,"character":26},"start":{"line":11,"character":4}}},{"name":"expiryDate","range":{"start":{"line":12,"character":4},"end":{"character":24,"line":12}},"kind":7,"selectionRange":{"end":{"character":18,"line":12},"start":{"line":12,"character":8}}},{"kind":7,"name":"cvv","range":{"end":{"line":13,"character":19},"start":{"character":4,"line":13}},"selectionRange":{"start":{"line":13,"character":8},"end":{"character":11,"line":13}}}],"kind":23,"range":{"start":{"line":9,"character":0},"end":{"character":1,"line":14}},"selectionRange":{"end":{"character":21,"line":9},"start":{"line":9,"character":7}},"name":"PaymentDetails"},{"name":"PaymentMethod","kind":10,"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":18}},"range":{"end":{"line":20,"character":1},"start":{"line":16,"character":0}},"children":[{"range":{"end":{"line":17,"character":19},"start":{"character":9,"line":17}},"selectionRange":{"start":{"character":9,"line":17},"end":{"line":17,"character":19}},"kind":22,"name":"creditCard"},{"selectionRange":{"start":{"character":9,"line":18},"end":{"line":18,"character":15}},"name":"paypal","kind":22,"range":{"end":{"line":18,"character":15},"start":{"character":9,"line":18}}},{"name":"applePay","range":{"end":{"line":19,"character":17},"start":{"line":19,"character":9}},"kind":22,"selectionRange":{"start":{"line":19,"character":9},"end":{"line":19,"character":17}}}]}]},{"symbols":[{"range":{"start":{"character":0,"line":9},"end":{"character":1,"line":16}},"children":[{"name":"id","selectionRange":{"end":{"line":10,"character":10},"start":{"line":10,"character":8}},"range":{"end":{"character":16,"line":10},"start":{"character":4,"line":10}},"kind":7},{"selectionRange":{"end":{"line":11,"character":12},"start":{"character":8,"line":11}},"name":"name","kind":7,"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":20}}},{"name":"description","range":{"end":{"character":27,"line":12},"start":{"line":12,"character":4}},"kind":7,"selectionRange":{"start":{"line":12,"character":8},"end":{"line":12,"character":19}}},{"kind":7,"range":{"start":{"character":4,"line":13},"end":{"line":13,"character":21}},"selectionRange":{"end":{"character":13,"line":13},"start":{"character":8,"line":13}},"name":"price"},{"name":"category","selectionRange":{"end":{"character":16,"line":14},"start":{"line":14,"character":8}},"range":{"start":{"line":14,"character":4},"end":{"line":14,"character":24}},"kind":7},{"range":{"end":{"line":15,"character":22},"start":{"character":4,"line":15}},"kind":7,"selectionRange":{"end":{"line":15,"character":16},"start":{"character":8,"line":15}},"name":"imageUrl"}],"kind":23,"name":"MenuItem","selectionRange":{"start":{"character":7,"line":9},"end":{"character":15,"line":9}}}],"name":"MenuItem.swift","code":"//\n//  id.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\nstruct MenuItem {\n    let id: UUID\n    var name: String\n    var description: String\n    var price: Double\n    var category: String\n    var imageUrl: URL?\n}\n"},{"name":"OrderItem.swift","code":"//\n//  OrderItem.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\nstruct OrderItem {\n    let menuItemId: UUID\n    var quantity: Int\n    var specialInstructions: String?\n}\n","symbols":[{"kind":23,"selectionRange":{"start":{"line":9,"character":7},"end":{"character":16,"line":9}},"name":"OrderItem","range":{"start":{"character":0,"line":9},"end":{"line":13,"character":1}},"children":[{"kind":7,"selectionRange":{"end":{"character":18,"line":10},"start":{"character":8,"line":10}},"range":{"end":{"character":24,"line":10},"start":{"character":4,"line":10}},"name":"menuItemId"},{"kind":7,"name":"quantity","selectionRange":{"start":{"character":8,"line":11},"end":{"character":16,"line":11}},"range":{"end":{"line":11,"character":21},"start":{"character":4,"line":11}}},{"name":"specialInstructions","range":{"end":{"character":36,"line":12},"start":{"line":12,"character":4}},"kind":7,"selectionRange":{"end":{"character":27,"line":12},"start":{"line":12,"character":8}}}]}]},{"name":"DeliveryDetails.swift","code":"//\n//  DeliveryDetails.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\nstruct DeliveryDetails {\n    var address: String\n    var estimatedDeliveryTime: Date\n}\n","symbols":[{"kind":23,"name":"DeliveryDetails","selectionRange":{"end":{"line":9,"character":22},"start":{"character":7,"line":9}},"children":[{"name":"address","kind":7,"range":{"end":{"line":10,"character":23},"start":{"character":4,"line":10}},"selectionRange":{"start":{"character":8,"line":10},"end":{"line":10,"character":15}}},{"range":{"end":{"character":35,"line":11},"start":{"character":4,"line":11}},"name":"estimatedDeliveryTime","selectionRange":{"end":{"character":29,"line":11},"start":{"line":11,"character":8}},"kind":7}],"range":{"start":{"character":0,"line":9},"end":{"character":1,"line":12}}}]},{"name":"Restaurant.swift","symbols":[{"kind":23,"name":"Restaurant","range":{"end":{"character":1,"line":15},"start":{"line":9,"character":0}},"selectionRange":{"start":{"line":9,"character":7},"end":{"line":9,"character":17}},"children":[{"name":"id","range":{"start":{"character":4,"line":11},"end":{"character":14,"line":11}},"kind":7,"selectionRange":{"end":{"line":11,"character":10},"start":{"line":11,"character":8}}},{"range":{"end":{"line":12,"character":20},"start":{"line":12,"character":4}},"kind":7,"name":"name","selectionRange":{"start":{"line":12,"character":8},"end":{"character":12,"line":12}}},{"range":{"end":{"character":23,"line":13},"start":{"line":13,"character":4}},"selectionRange":{"end":{"line":13,"character":15},"start":{"character":8,"line":13}},"name":"address","kind":7},{"selectionRange":{"end":{"line":14,"character":17},"start":{"line":14,"character":8}},"range":{"start":{"character":4,"line":14},"end":{"line":14,"character":29}},"name":"menuItems","kind":7}]}],"code":"//\n//  Restaurant.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\nstruct Restaurant {\n    typealias ID = UUID\n    let id: ID\n    var name: String\n    var address: String\n    var menuItems: [MenuItem]\n}\n"}],"name":"Models"},{"name":"Use Cases","files":[{"symbols":[{"selectionRange":{"end":{"line":9,"character":26},"start":{"line":9,"character":9}},"kind":11,"children":[{"range":{"end":{"character":41,"line":10},"start":{"line":10,"character":4}},"kind":6,"selectionRange":{"end":{"line":10,"character":28},"start":{"character":9,"line":10}},"name":"place(order:)"}],"name":"PlaceOrderUseCase","range":{"end":{"line":11,"character":1},"start":{"line":9,"character":0}}}],"code":"//\n//  PlaceOrderUseCase.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\nprotocol PlaceOrderUseCase {\n    func place(order: Order) async throws\n}\n","name":"PlaceOrderUseCase.swift"},{"name":"LoginUseCase.swift","code":"//\n//  LoginUseCase.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\npublic protocol LoginUseCase {\n    func login(email: String, password: String) async throws\n}\n\n\npublic struct LoginRequest {\n    public let email: String\n    public let password: String\n}\n\nextension UseCase<LoginRequest, Void>: LoginUseCase {\n    public func login(email: String, password: String) async throws {\n        try await execute(\n            LoginRequest(email: email, password: password)\n        )\n    }\n}\n\npublic struct LoginFailedException: Error {\n    public init() {}\n}\n","symbols":[{"children":[{"selectionRange":{"end":{"character":47,"line":10},"start":{"line":10,"character":9}},"kind":6,"name":"login(email:password:)","range":{"end":{"line":10,"character":60},"start":{"character":4,"line":10}}}],"kind":11,"range":{"start":{"character":7,"line":9},"end":{"line":11,"character":1}},"name":"LoginUseCase","selectionRange":{"end":{"line":9,"character":28},"start":{"line":9,"character":16}}},{"name":"LoginRequest","children":[{"selectionRange":{"start":{"character":15,"line":15},"end":{"character":20,"line":15}},"kind":7,"range":{"start":{"character":11,"line":15},"end":{"character":28,"line":15}},"name":"email"},{"name":"password","range":{"start":{"line":16,"character":11},"end":{"line":16,"character":31}},"kind":7,"selectionRange":{"start":{"character":15,"line":16},"end":{"line":16,"character":23}}}],"selectionRange":{"end":{"character":26,"line":14},"start":{"line":14,"character":14}},"range":{"end":{"line":17,"character":1},"start":{"line":14,"character":7}},"kind":23},{"range":{"start":{"line":19,"character":0},"end":{"line":25,"character":1}},"name":"UseCase<LoginRequest, Void>","kind":3,"selectionRange":{"start":{"line":19,"character":10},"end":{"line":19,"character":37}},"children":[{"kind":6,"name":"login(email:password:)","range":{"start":{"line":20,"character":11},"end":{"character":5,"line":24}},"selectionRange":{"end":{"line":20,"character":54},"start":{"character":16,"line":20}}}]},{"selectionRange":{"end":{"character":34,"line":27},"start":{"character":14,"line":27}},"name":"LoginFailedException","range":{"start":{"line":27,"character":7},"end":{"character":1,"line":29}},"kind":23,"children":[{"selectionRange":{"start":{"line":28,"character":11},"end":{"line":28,"character":17}},"range":{"end":{"line":28,"character":20},"start":{"character":11,"line":28}},"name":"init()","kind":6}]}]},{"name":"RegisterCustomerUseCase.swift","code":"//\n//  RegisterCustomerUseCase.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\npublic protocol RegisterCustomerUseCase {\n    func register(customer: Customer, password: String) async throws\n}\n\n\npublic struct RegisterRequest {\n    public let customer: Customer\n    public let password: String\n}\n\nextension UseCase: RegisterCustomerUseCase where Input == RegisterRequest, Output == Void {\n    public func register(customer: Customer, password: String) async throws {\n        try await execute(RegisterRequest(customer: customer, password: password))\n    }\n}\n","symbols":[{"range":{"start":{"line":9,"character":7},"end":{"character":1,"line":11}},"kind":11,"selectionRange":{"end":{"line":9,"character":39},"start":{"line":9,"character":16}},"children":[{"selectionRange":{"start":{"character":9,"line":10},"end":{"line":10,"character":55}},"kind":6,"name":"register(customer:password:)","range":{"start":{"character":4,"line":10},"end":{"character":68,"line":10}}}],"name":"RegisterCustomerUseCase"},{"selectionRange":{"end":{"character":29,"line":14},"start":{"line":14,"character":14}},"kind":23,"range":{"end":{"line":17,"character":1},"start":{"line":14,"character":7}},"children":[{"kind":7,"selectionRange":{"end":{"character":23,"line":15},"start":{"line":15,"character":15}},"name":"customer","range":{"end":{"character":33,"line":15},"start":{"character":11,"line":15}}},{"kind":7,"selectionRange":{"start":{"character":15,"line":16},"end":{"character":23,"line":16}},"range":{"start":{"character":11,"line":16},"end":{"line":16,"character":31}},"name":"password"}],"name":"RegisterRequest"},{"range":{"end":{"character":1,"line":23},"start":{"line":19,"character":0}},"kind":3,"name":"UseCase","children":[{"selectionRange":{"start":{"line":20,"character":16},"end":{"character":62,"line":20}},"kind":6,"range":{"end":{"line":22,"character":5},"start":{"character":11,"line":20}},"name":"register(customer:password:)"}],"selectionRange":{"start":{"line":19,"character":10},"end":{"character":17,"line":19}}}]},{"name":"UseCase.swift","code":"//\n//  UseCase.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 22.12.2023.\n//\n\nimport Foundation\n\npublic typealias UseCaseFetcher<Output> = UseCase<Void, Output>\npublic typealias UseCaseSender<Input> = UseCase<Input, Void>\npublic typealias UseCaseVoid = UseCase<Void, Void>\n\nextension UseCase where Input == Void {\n    \n    public init(_ block: @escaping () async throws -> Output) {\n        self.block = { _ in try await block() }\n    }\n    \n    @discardableResult\n    public func execute() async throws -> Output {\n        try await block(Void())\n    }\n}\n\npublic struct UseCase<Input, Output> {\n    let block: (Input) async throws -> Output\n    \n    public init(_ block: @escaping (Input) async throws -> Output) {\n        self.block = block\n    }\n    \n    @discardableResult\n    public func execute(_ input: Input) async throws -> Output {\n        try await block(input)\n    }\n}\n","symbols":[{"range":{"start":{"character":32,"line":9},"end":{"character":38,"line":9}},"name":"Output","selectionRange":{"start":{"line":9,"character":32},"end":{"line":9,"character":38}},"kind":26},{"kind":26,"selectionRange":{"end":{"line":10,"character":36},"start":{"line":10,"character":31}},"range":{"start":{"line":10,"character":31},"end":{"character":36,"line":10}},"name":"Input"},{"kind":3,"children":[{"selectionRange":{"start":{"character":11,"line":15},"end":{"character":61,"line":15}},"kind":6,"name":"init(_:)","range":{"end":{"line":17,"character":5},"start":{"line":15,"character":11}}},{"range":{"start":{"line":20,"character":11},"end":{"line":22,"character":5}},"name":"execute()","selectionRange":{"end":{"line":20,"character":25},"start":{"character":16,"line":20}},"kind":6}],"selectionRange":{"start":{"line":13,"character":10},"end":{"character":17,"line":13}},"range":{"start":{"character":0,"line":13},"end":{"character":1,"line":23}},"name":"UseCase"},{"children":[{"kind":26,"selectionRange":{"end":{"line":25,"character":27},"start":{"character":22,"line":25}},"name":"Input","range":{"end":{"line":25,"character":27},"start":{"line":25,"character":22}}},{"range":{"start":{"line":25,"character":29},"end":{"line":25,"character":35}},"selectionRange":{"start":{"line":25,"character":29},"end":{"character":35,"line":25}},"kind":26,"name":"Output"},{"range":{"end":{"character":45,"line":26},"start":{"character":4,"line":26}},"selectionRange":{"start":{"line":26,"character":8},"end":{"line":26,"character":13}},"name":"block","kind":7},{"name":"init(_:)","selectionRange":{"end":{"line":28,"character":66},"start":{"character":11,"line":28}},"kind":6,"range":{"end":{"line":30,"character":5},"start":{"line":28,"character":11}}},{"name":"execute(_:)","range":{"start":{"character":11,"line":33},"end":{"line":35,"character":5}},"kind":6,"selectionRange":{"end":{"line":33,"character":39},"start":{"character":16,"line":33}}}],"kind":23,"selectionRange":{"start":{"character":14,"line":25},"end":{"line":25,"character":21}},"name":"UseCase","range":{"end":{"line":36,"character":1},"start":{"character":7,"line":25}}}]},{"symbols":[{"children":[{"name":"fetch()","kind":6,"range":{"end":{"line":10,"character":45},"start":{"line":10,"character":4}},"selectionRange":{"end":{"character":16,"line":10},"start":{"line":10,"character":9}}}],"kind":11,"range":{"start":{"line":9,"character":0},"end":{"character":1,"line":11}},"selectionRange":{"start":{"line":9,"character":9},"end":{"character":32,"line":9}},"name":"FetchRestaurantsUseCase"}],"code":"//\n//  FetchRestaurantsUseCase.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\n\nprotocol FetchRestaurantsUseCase {\n    func fetch() async throws -> [Restaurant]\n}\n","name":"FetchRestaurantsUseCase.swift"}]}]},{"files":[{"symbols":[{"name":"LoginViewModel","children":[{"kind":7,"name":"email","range":{"end":{"character":44,"line":11},"start":{"character":22,"line":11}},"selectionRange":{"start":{"line":11,"character":26},"end":{"character":31,"line":11}}},{"kind":7,"name":"password","selectionRange":{"end":{"line":12,"character":34},"start":{"character":26,"line":12}},"range":{"start":{"line":12,"character":22},"end":{"character":47,"line":12}}},{"name":"errorMessage","selectionRange":{"end":{"character":38,"line":13},"start":{"line":13,"character":26}},"kind":7,"range":{"end":{"line":13,"character":47},"start":{"line":13,"character":22}}},{"name":"hasFinishedLogin","selectionRange":{"start":{"character":26,"line":14},"end":{"line":14,"character":42}},"range":{"start":{"line":14,"character":22},"end":{"line":14,"character":56}},"kind":7},{"name":"hasFinishedRegister","kind":7,"selectionRange":{"start":{"line":15,"character":26},"end":{"line":15,"character":45}},"range":{"end":{"character":59,"line":15},"start":{"line":15,"character":22}}},{"kind":7,"name":"loginUseCase","selectionRange":{"end":{"line":17,"character":28},"start":{"line":17,"character":16}},"range":{"start":{"line":17,"character":12},"end":{"line":17,"character":42}}},{"name":"registerUseCase","kind":7,"selectionRange":{"end":{"line":18,"character":31},"start":{"line":18,"character":16}},"range":{"start":{"line":18,"character":12},"end":{"character":56,"line":18}}},{"kind":7,"selectionRange":{"start":{"line":20,"character":16},"end":{"character":29,"line":20}},"name":"hasEmptyField","range":{"start":{"character":12,"line":20},"end":{"character":5,"line":23}}},{"selectionRange":{"start":{"character":11,"line":25},"end":{"line":25,"character":85}},"range":{"end":{"character":5,"line":28},"start":{"line":25,"character":11}},"name":"init(loginUseCase:registerUseCase:)","kind":6},{"name":"loginSelected()","kind":6,"range":{"start":{"line":30,"character":11},"end":{"line":46,"character":5}},"selectionRange":{"end":{"line":30,"character":31},"start":{"character":16,"line":30}}},{"name":"register()","range":{"start":{"line":48,"character":11},"end":{"line":72,"character":5}},"selectionRange":{"end":{"character":26,"line":48},"start":{"character":16,"line":48}},"kind":6}],"range":{"start":{"character":7,"line":10},"end":{"character":1,"line":73}},"kind":5,"selectionRange":{"start":{"line":10,"character":13},"end":{"line":10,"character":27}}}],"code":"//\n//  LoginViewModel.swift\n//  SuperDish\n//\n//  Created by Adrian Bilescu on 10.12.2023.\n//\n\nimport Foundation\nimport Combine\n\npublic class LoginViewModel: ObservableObject {\n    @Published public var email: String = \"\"\n    @Published public var password: String = \"\"\n    @Published public var errorMessage: String?\n    @Published public var hasFinishedLogin: Bool = false\n    @Published public var hasFinishedRegister: Bool = false\n    \n    private var loginUseCase: LoginUseCase\n    private var registerUseCase: RegisterCustomerUseCase\n    \n    private var hasEmptyField: Bool {\n        email.isEmpty || password.isEmpty\n        \n    }\n    \n    public init(loginUseCase: LoginUseCase, registerUseCase: RegisterCustomerUseCase) {\n        self.loginUseCase = loginUseCase\n        self.registerUseCase = registerUseCase\n    }\n    \n    public func loginSelected() async {\n        errorMessage = \"\"\n        guard !hasEmptyField else {\n            errorMessage = \"Fields are empty\"\n            return\n        }\n\n        do {\n            try await loginUseCase.login(\n                email: email,\n                password: password\n            )\n            hasFinishedLogin = true\n        } catch is LoginFailedException {\n            errorMessage = \"Invalid credentials\"\n        } catch {}\n    }\n    \n    public func register() async {\n        errorMessage = \"\"\n        guard !hasEmptyField else {\n            errorMessage = \"Fields are empty\"\n            return\n        }\n        \n        \n        do {\n            try await registerUseCase.register(\n                customer: Customer(\n                    id: UUID(),\n                    name: \"Adrian\",\n                    email: email,\n                    deliveryAddress: \"Cluj, Romania\"\n                ),\n                password: password\n            )\n            hasFinishedRegister = true\n        } catch {\n            errorMessage = \"Invalid credentials\"\n        }\n        \n        \n    }\n}\n","name":"LoginViewModel.swift"},{"symbols":[{"range":{"start":{"character":13,"line":9},"end":{"line":25,"character":1}},"kind":5,"selectionRange":{"start":{"character":19,"line":9},"end":{"character":26,"line":9}},"name":"AppFlow","children":[{"range":{"end":{"line":10,"character":70},"start":{"line":10,"character":35}},"selectionRange":{"start":{"line":10,"character":39},"end":{"character":53,"line":10}},"name":"loginViewModel","kind":7},{"name":"loginUseCase","kind":7,"selectionRange":{"end":{"line":11,"character":28},"start":{"character":16,"line":11}},"range":{"end":{"line":11,"character":42},"start":{"character":12,"line":11}}},{"range":{"end":{"character":56,"line":12},"start":{"line":12,"character":12}},"name":"registerUseCase","kind":7,"selectionRange":{"start":{"line":12,"character":16},"end":{"character":31,"line":12}}},{"kind":6,"range":{"start":{"character":11,"line":14},"end":{"character":5,"line":17}},"name":"init(loginUseCase:registerUseCase:)","selectionRange":{"start":{"line":14,"character":11},"end":{"line":14,"character":85}}},{"name":"start()","kind":6,"range":{"end":{"character":5,"line":24},"start":{"line":19,"character":11}},"selectionRange":{"start":{"line":19,"character":16},"end":{"line":19,"character":23}}}]}],"name":"AppFlow.swift","code":"//\n//  File.swift\n//  \n//\n//  Created by Adrian Bilescu on 24.12.2023.\n//\n\nimport Foundation\n\nfinal public class AppFlow: ObservableObject {\n    @Published public private(set) var loginViewModel: LoginViewModel?\n    private let loginUseCase: LoginUseCase\n    private let registerUseCase: RegisterCustomerUseCase\n    \n    public init(loginUseCase: LoginUseCase, registerUseCase: RegisterCustomerUseCase) {\n        self.loginUseCase = loginUseCase\n        self.registerUseCase = registerUseCase\n    }\n    \n    public func start() {\n        loginViewModel = LoginViewModel(\n            loginUseCase: loginUseCase,\n            registerUseCase: registerUseCase\n        )\n    }\n}\n"},{"code":"//\n//  File.swift\n//  \n//\n//  Created by Adrian Bilescu on 24.12.2023.\n//\n\nimport Foundation\n\nextension UseCaseSender {\n    public static func makeEmpty() -> UseCaseSender<Input> {\n        UseCaseSender { _ in }\n    }\n}\n","name":"UseCase+Empty.swift","symbols":[{"name":"UseCaseSender","range":{"start":{"character":0,"line":9},"end":{"character":1,"line":13}},"kind":3,"selectionRange":{"end":{"character":23,"line":9},"start":{"line":9,"character":10}},"children":[{"kind":6,"name":"makeEmpty()","range":{"start":{"line":10,"character":11},"end":{"character":5,"line":12}},"selectionRange":{"start":{"line":10,"character":23},"end":{"line":10,"character":34}}}]}]}],"name":"Presentation"}]}],"name":"Sources"}]}]}}